package ru.nsk.samples

import ru.nsk.kstatemachine.*
import ru.nsk.samples.FinishedEventDataStateSample.IntEvent
import ru.nsk.samples.FinishedEventDataStateSample.States.*

private object FinishedEventDataStateSample {
    data class IntEvent(override val data: Int) : DataEvent<Int>

    sealed interface States {
        object State1 : States, DefaultState()
        object State2 : States, DefaultFinalDataState<Int>(dataExtractor = defaultDataExtractor())
        object State11 : States, DefaultState()
        object State12 : States, DefaultFinalDataState<Int>(dataExtractor = defaultDataExtractor())
    }
}

private const val DATA = 42

/**
 * [FinishedEvent] is generated when state enters its child final state.
 * If final state is [DataState] the event will receive its data field value.
 * This data may be passed to another [DataState]
 */
fun main() {
    val machine = createStateMachine {
        logger = StateMachine.Logger { println(it) }

        addInitialState(State1) {
            addInitialState(State11) {
                dataTransition<IntEvent, Int>(targetState = State12)
            }
            // State1 finished when reaches its child final state
            addFinalState(State12)
            // FinishedEvent containing data value from FinalState is generated by the library when State1 finishes
            transitionConditionally<FinishedEvent> {
                direction = { targetState(State2) }
                onTriggered { check(it.event.data == DATA) }
            }
        }
        addState(State2)
    }

    machine.processEvent(IntEvent(DATA))

    check(State2 in machine.activeStates())
    check(State2.lastData == DATA)
}